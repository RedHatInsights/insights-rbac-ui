# RBAC UI Project - General Development Rules

## Project Context

This is a React-based UI application for Red Hat's Role-Based Access Control (RBAC) system, built with:
- **React** for UI components
- **PatternFly** for design system and components
- **TypeScript** for type safety
- **Storybook** for component documentation and testing
- **Redux** for state management

## Key Technologies & Dependencies

Always check `package.json` for current versions when working with:
- `@patternfly/react-core` - Core PatternFly components
- `@patternfly/react-table` - Table components
- `@storybook/react-webpack5` - Storybook stories
- `react-router-dom` - Routing
- `@redhat-cloud-services/frontend-components` - Red Hat specific components

## Core Development Guidelines

### Component Organization
- **Presentational components** in `src/presentational-components/` - Pure UI components
- **Smart components** in `src/smart-components/` - Connected components with business logic
- **Helpers** in `src/helpers/` - Business logic utilities
- **Redux** in `src/redux/` - State management

### File Naming Conventions
- Components: `ComponentName.js/tsx`
- Stories: `ComponentName.stories.tsx`
- Tests: `ComponentName.test.js`
- Styles: `ComponentName.scss`

### Code Quality Requirements
- All code must pass TypeScript compilation (`npm run build`)
- Linting must pass without errors (`npm run lint:js`)
- New components should have Storybook stories
- Use PatternFly components and patterns where possible

## Development Workflow

### Never Perform Git Operations
- **CRITICAL**: Never run git commands or suggest git workflows unless explicitly requested
- Focus on code changes and file modifications only
- Let user handle all version control operations

### Investigation Process
1. Check dependency versions in `package.json` first
2. Understand component's role and data requirements
3. Look for existing patterns in similar components
4. Use PatternFly documentation for component APIs
5. Verify changes with build/lint commands

### Building and Testing
- `npm run build` - Production build
- `npm run lint:js` - JavaScript/TypeScript linting
- `npm run storybook` - Start Storybook development server
- `npm test` - Run test suite

## PatternFly Integration

### Common Patterns
- Use `RowWrapperProps` for table row components
- Import types from appropriate PatternFly packages
- Follow PatternFly's component composition patterns
- Use PatternFly's built-in accessibility features

### Data Structures
- Table components often work with `row` objects containing `cells` arrays
- Understand what data each component actually consumes
- Use realistic data structures that match production usage

## Architecture

### Key Directories
- `src/smart-components/` - Feature-based component organization
  - `access-management/` - User and group access management
  - `group/` - Group management functionality
  - `role/` - Role management functionality
  - `user/` - User management functionality
  - `workspaces/` - Workspace management functionality
- `src/presentational-components/` - Reusable UI components
- `src/helpers/` - Business logic by feature area
- `src/redux/` - State management (actions, reducers)

This project follows Red Hat's frontend development standards and integrates with the Red Hat Cloud Services platform. 