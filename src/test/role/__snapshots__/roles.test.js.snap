// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Roles /> should render correctly 1`] = `
<TableToolbarView
  actionResolver={[Function]}
  areActionsDisabled={[Function]}
  borders={true}
  checkedRows={Array []}
  columns={
    Array [
      Object {
        "key": "display_name",
        "title": "Name",
        "transforms": Array [
          [Function],
          [Function],
        ],
      },
      Object {
        "title": "Description",
      },
      Object {
        "title": "Permissions",
        "transforms": Array [
          [Function],
        ],
      },
      Object {
        "title": "Groups",
        "transforms": Array [
          [Function],
        ],
      },
      Object {
        "key": "modified",
        "title": "Last modified",
        "transforms": Array [
          [Function],
          [Function],
        ],
      },
    ]
  }
  data={
    Array [
      Object {
        "accessCount": "test",
        "description": "test",
        "groups_in_count": 5,
        "modified": 1970-01-01T00:00:00.000Z,
        "name": "Test name",
        "system": "test",
        "uuid": "test",
      },
    ]
  }
  emptyFilters={Object {}}
  fetchData={[Function]}
  filterItems={Array []}
  filterPlaceholder="name"
  filterValue={Array []}
  filters={Array []}
  hideFilterChips={false}
  hideHeader={false}
  isCollapsible={false}
  isCompact={false}
  isFilterable={false}
  isLoading={false}
  isSelectable={false}
  onSort={[Function]}
  ouiaId="roles-table"
  pagination={
    Object {
      "itemCount": 0,
      "limit": 20,
      "offset": 0,
    }
  }
  routes={[Function]}
  rowWrapper={[Function]}
  rows={
    Array [
      Object {
        "cells": Array [
          <React.Fragment>
            <Link
              to="/roles/detail/test"
            >
              Test name
            </Link>
          </React.Fragment>,
          "test",
          <React.Fragment>
            <Link
              to="/roles/detail/test"
            >
              test
            </Link>
          </React.Fragment>,
          5,
          <React.Fragment>
            <DateFormat
              date={1970-01-01T00:00:00.000Z}
              type="onlyDate"
            />
          </React.Fragment>,
        ],
        "disableSelection": true,
        "selected": false,
        "system": "test",
        "uuid": "test",
      },
    ]
  }
  setCheckedItems={[Function]}
  setFilterValue={[Function]}
  sortBy={
    Object {
      "direction": "asc",
      "index": 0,
    }
  }
  tableId="roles"
  testRoles={true}
  textFilterRef={
    Object {
      "current": <input
        aria-invalid="false"
        aria-label="text input"
        class="pf-c-form-control ins-c-conditional-filter "
        data-ouia-component-id="ConditionalFilter"
        data-ouia-component-type="PF4/TextInput"
        data-ouia-safe="true"
        id="filter-by-string"
        placeholder="Filter by {key}"
        type="text"
        value=""
        widget-type="InsightsInput"
      />,
    }
  }
  titlePlural="roles"
  titleSingular="role"
  toolbarButtons={[Function]}
/>
`;

exports[`<Roles /> should render correctly in loading state 1`] = `
<ListLoader
  items={5}
/>
`;

exports[`<Roles /> should render correctly in org admin 1`] = `
<TableToolbarView
  actionResolver={[Function]}
  areActionsDisabled={[Function]}
  borders={true}
  checkedRows={Array []}
  columns={
    Array [
      Object {
        "key": "display_name",
        "title": "Name",
        "transforms": Array [
          [Function],
          [Function],
        ],
      },
      Object {
        "title": "Description",
      },
      Object {
        "title": "Permissions",
        "transforms": Array [
          [Function],
        ],
      },
      Object {
        "title": "Groups",
        "transforms": Array [
          [Function],
        ],
      },
      Object {
        "key": "modified",
        "title": "Last modified",
        "transforms": Array [
          [Function],
          [Function],
        ],
      },
    ]
  }
  data={
    Array [
      Object {
        "accessCount": "test",
        "description": "test",
        "groups_in_count": 5,
        "modified": 1970-01-01T00:00:00.000Z,
        "name": "Test name",
        "system": "test",
        "uuid": "test",
      },
    ]
  }
  emptyFilters={Object {}}
  fetchData={[Function]}
  filterItems={Array []}
  filterPlaceholder="name"
  filterValue={Array []}
  filters={Array []}
  hideFilterChips={false}
  hideHeader={false}
  isCollapsible={false}
  isCompact={false}
  isFilterable={false}
  isLoading={false}
  isSelectable={false}
  onSort={[Function]}
  ouiaId="roles-table"
  pagination={
    Object {
      "itemCount": 0,
      "limit": 20,
      "offset": 0,
    }
  }
  routes={[Function]}
  rowWrapper={[Function]}
  rows={
    Array [
      Object {
        "cells": Array [
          <React.Fragment>
            <Link
              to="/roles/detail/test"
            >
              Test name
            </Link>
          </React.Fragment>,
          "test",
          <React.Fragment>
            <Link
              to="/roles/detail/test"
            >
              test
            </Link>
          </React.Fragment>,
          5,
          <React.Fragment>
            <DateFormat
              date={1970-01-01T00:00:00.000Z}
              type="onlyDate"
            />
          </React.Fragment>,
        ],
        "disableSelection": true,
        "selected": false,
        "system": "test",
        "uuid": "test",
      },
    ]
  }
  setCheckedItems={[Function]}
  setFilterValue={[Function]}
  sortBy={
    Object {
      "direction": "asc",
      "index": 0,
    }
  }
  tableId="roles"
  testRoles={true}
  textFilterRef={
    Object {
      "current": <input
        aria-invalid="false"
        aria-label="text input"
        class="pf-c-form-control ins-c-conditional-filter "
        data-ouia-component-id="ConditionalFilter"
        data-ouia-component-type="PF4/TextInput"
        data-ouia-safe="true"
        id="filter-by-string"
        placeholder="Filter by {key}"
        type="text"
        value=""
        widget-type="InsightsInput"
      />,
    }
  }
  titlePlural="roles"
  titleSingular="role"
  toolbarButtons={[Function]}
/>
`;
